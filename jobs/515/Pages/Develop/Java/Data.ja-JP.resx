<?xml version="1.0" encoding="UTF-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Section1_Heading1" xml:space="preserve">
    <value>データ サービス</value>
  </data>
  <data name="Section1_Heading2" xml:space="preserve">
    <value>基礎</value>
  </data>
  <data name="Section1_Heading3_Text1" xml:space="preserve">
    <value> ガイダンス:</value>
  </data>
  <data name="Section1_Heading3_Text2" xml:space="preserve">
    <value>データ管理とビジネス分析</value>
  </data>
  <data name="Section1_Text1" xml:space="preserve">
    <value>リレーショナル データと非リレーショナル データの両方を操作するための Azure のテクノロジについて説明しています。</value>
  </data>
  <data name="Section1_Heading4_Text1" xml:space="preserve">
    <value> ガイダンス:</value>
  </data>
  <data name="Section1_Heading4_Text2" xml:space="preserve">
    <value>データ管理: 適切なテクノロジの選択</value>
  </data>
  <data name="Section1_Text2" xml:space="preserve">
    <value>Azure のデータ管理テクノロジのさまざまなシナリオについて説明しています。</value>
  </data>
  <data name="Section1_Heading5" xml:space="preserve">
    <value>Azure Storage</value>
  </data>
  <data name="Section1_Heading6_Text1" xml:space="preserve">
    <value> 機能ガイド:</value>
  </data>
  <data name="Section1_Heading6_Text2" xml:space="preserve">
    <value>BLOB サービス</value>
  </data>
  <data name="Section1_Text3" xml:space="preserve">
    <value>BLOB は、大量の非構造化テキストまたはバイナリ データ (ビデオ、オーディオ、画像など) を格納するための最もシンプルなストレージです。BLOB は ISO 27001 の認定を受けた管理されたサービスで、自動的に拡張でき、最大 100 TB のデータを格納できます。BLOB は、REST およびクライアント API 経由で事実上どこからでもアクセスできます。</value>
  </data>
  <data name="Section1_Heading7_Text1" xml:space="preserve">
    <value> 機能ガイド:</value>
  </data>
  <data name="Section1_Heading7_Text2" xml:space="preserve">
    <value>Table サービス</value>
  </data>
  <data name="Section1_Text4" xml:space="preserve">
    <value>テーブルは、大量の非構造化データのストレージを必要とするアプリケーション用の NoSQL 機能を提供しています。テーブルは ISO 27001 の認定を受けた管理されたサービスで、自動的に拡張でき、最大 100 TB のデータを格納できます。テーブルは、REST およびマネージ API 経由で事実上どこからでもアクセスできます。</value>
  </data>
  <data name="Section1_Heading8_Text1" xml:space="preserve">
    <value> チュートリアル:</value>
  </data>
  <data name="Section1_Heading8_Text2" xml:space="preserve">
    <value>BLOB ストレージを使用するイメージ マーケットプレースの作成</value>
  </data>
  <data name="Section1_Text5" xml:space="preserve">
    <value>画像を Azure BLOB ストレージに保存するアプリケーションを作成します。Java 用 Azure クライアント ライブラリおよび Azure ストレージを使用する方法について確認します。</value>
  </data>
  <data name="Section1_Heading9_Text1" xml:space="preserve">
    <value> 方法:</value>
  </data>
  <data name="Section1_Heading9_Text2" xml:space="preserve">
    <value>BLOB ストレージでカスタム ドメインを使用する</value>
  </data>
  <data name="Section1_Text6" xml:space="preserve">
    <value>カスタム ドメインを BLOB サービス エンドポイントにマップして、アプリケーションの URL にドメイン名が表示されるようにストレージ アカウントを構成します。</value>
  </data>
  <data name="Section1_Heading10" xml:space="preserve">
    <value>リレーショナル データ</value>
  </data>
  <data name="Section1_Heading11_Text1" xml:space="preserve">
    <value> 機能ガイド:</value>
  </data>
  <data name="Section1_Heading11_Text2" xml:space="preserve">
    <value>SQL Database</value>
  </data>
  <data name="Section1_Text7" xml:space="preserve">
    <value>Azure では、多彩な機能を備えたサービスとしてのリレーショナル データベースを必要とするアプリケーション用に、以前 SQL Azure Database と呼ばれた SQL Database を用意しています。SQL Database は、高レベルの相互運用性を提供し、顧客は開発フレームワークを使用してアプリケーションを作成できます。</value>
  </data>
  <data name="Section1_Heading12_Text1" xml:space="preserve">
    <value> 方法:</value>
  </data>
  <data name="Section1_Heading12_Text2" xml:space="preserve">
    <value>SQL Server Management Studio を使用した Azure SQL Database　の管理</value>
  </data>
  <data name="Section1_Text8" xml:space="preserve">
    <value>SQL Server Management Studio を使用して SQL Database の論理サーバーとデータベースを管理できます。この記事では、データベースの作成と管理、ログインの作成と管理、動的管理ビューを使用した監視について詳しく説明しています。</value>
  </data>
  <data name="Section1_Heading13_Text1" xml:space="preserve">
    <value> チュートリアル:</value>
  </data>
  <data name="Section1_Heading13_Text2" xml:space="preserve">
    <value>Java Spring Framework アプリケーションから Azure および Azure SQL Database　への移行</value>
  </data>
  <data name="Section1_Text9" xml:space="preserve">
    <value>Azure SQL Database　と JPA/Hibernate、最新の SQL Server JDBC ドライバーを使用して、完全な Spring Framework アプリケーション (Java Pet Clinic) を Azure に移行する方法をエンド ツー エンドで紹介したチュートリアルです。</value>
  </data>
  <data name="Section1_Heading14_Text1" xml:space="preserve">
    <value> チュートリアル:</value>
  </data>
  <data name="Section1_Heading14_Text2" xml:space="preserve">
    <value>DocumentDB を使って Java Web アプリケーションをビルドする</value>
  </data>
  <data name="Section1_Text10" xml:space="preserve">
    <value>このチュートリルは、Azure DocumentDB サービスを使用して、Azure Websites でホストされる Java アプリケーションからデータを格納したりアクセスしたりする方法を示しています。</value>
  </data>
  <data name="Section1_Heading11" xml:space="preserve">
    <value>非リレーショナル データ</value>
  </data>
</root>