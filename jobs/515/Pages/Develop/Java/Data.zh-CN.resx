<?xml version="1.0" encoding="UTF-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Section1_Heading1" xml:space="preserve">
    <value>数据服务</value>
  </data>
  <data name="Section1_Heading2" xml:space="preserve">
    <value>基础</value>
  </data>
  <data name="Section1_Heading3_Text1" xml:space="preserve">
    <value> 指南：</value>
  </data>
  <data name="Section1_Heading3_Text2" xml:space="preserve">
    <value>数据管理和业务分析</value>
  </data>
  <data name="Section1_Text1" xml:space="preserve">
    <value>了解 Azure 中可帮助您使用关系和非关系数据的技术。</value>
  </data>
  <data name="Section1_Heading4_Text1" xml:space="preserve">
    <value> 指南：</value>
  </data>
  <data name="Section1_Heading4_Text2" xml:space="preserve">
    <value>数据管理：选择合适的技术</value>
  </data>
  <data name="Section1_Text2" xml:space="preserve">
    <value>了解 Azure 中的不同数据管理技术方案。</value>
  </data>
  <data name="Section1_Heading5" xml:space="preserve">
    <value>Azure 存储空间</value>
  </data>
  <data name="Section1_Heading6_Text1" xml:space="preserve">
    <value> 功能指南：</value>
  </data>
  <data name="Section1_Heading6_Text2" xml:space="preserve">
    <value>Blob 服务</value>
  </data>
  <data name="Section1_Text3" xml:space="preserve">
    <value>Blob 是存储大量非结构化文本或二进制数据（如视频、音频和图像）的最简单方式。Blob 是经 ISO 27001 认证的托管服务，可自动扩展以存储多达 100 TB 的数据。几乎可从任何位置通过 REST 和客户端 API 访问这些 Blob。</value>
  </data>
  <data name="Section1_Heading7_Text1" xml:space="preserve">
    <value> 功能指南：</value>
  </data>
  <data name="Section1_Heading7_Text2" xml:space="preserve">
    <value>表服务</value>
  </data>
  <data name="Section1_Text4" xml:space="preserve">
    <value>表为需要存储大量非结构化数据的应用程序提供 NoSQL 容量。表是经 ISO 27001 认证的托管服务，可自动扩展以存储多达 100 TB 的数据。几乎可从任何位置通过 REST 和托管 API 访问这些表。</value>
  </data>
  <data name="Section1_Heading8_Text1" xml:space="preserve">
    <value> 教程：</value>
  </data>
  <data name="Section1_Heading8_Text2" xml:space="preserve">
    <value>创建使用 Blob 存储的映像市场</value>
  </data>
  <data name="Section1_Text5" xml:space="preserve">
    <value>创建可在 Azure Blob 存储中存储图像的应用程序。您将了解如何使用针对 Java 的 Azure 客户端库以及如何使用 Azure 存储。</value>
  </data>
  <data name="Section1_Heading9_Text1" xml:space="preserve">
    <value> 如何：</value>
  </data>
  <data name="Section1_Heading9_Text2" xml:space="preserve">
    <value>将自定义域用于 Blob 存储</value>
  </data>
  <data name="Section1_Text6" xml:space="preserve">
    <value>将存储帐户配置为将自定义域映射到 Blob 服务终结点，以便让用户在应用程序的 URL 中看到域名。</value>
  </data>
  <data name="Section1_Heading10" xml:space="preserve">
    <value>关系数据</value>
  </data>
  <data name="Section1_Heading11_Text1" xml:space="preserve">
    <value> 功能指南：</value>
  </data>
  <data name="Section1_Heading11_Text2" xml:space="preserve">
    <value>SQL Database</value>
  </data>
  <data name="Section1_Text7" xml:space="preserve">
    <value>对于需要功能完备的关系型数据库即服务的应用程序，Azure 提供了 SQL Database（以前称为 SQL Azure 数据库）。SQL Database 提供高级别互操作性，允许客户利用众多主要开发框架来构建应用程序。</value>
  </data>
  <data name="Section1_Heading12_Text1" xml:space="preserve">
    <value> 如何：</value>
  </data>
  <data name="Section1_Heading12_Text2" xml:space="preserve">
    <value>使用 SQL Server Management Studio 管理 Azure SQL Database</value>
  </data>
  <data name="Section1_Text8" xml:space="preserve">
    <value>您可以使用 SQL Server Management Studio 管理 SQL Database 逻辑服务器和数据库。本文包括有关创建和管理数据库、创建和管理登录，以及使用动态管理视图进行监视的详细信息。</value>
  </data>
  <data name="Section1_Heading13_Text1" xml:space="preserve">
    <value> 教程：</value>
  </data>
  <data name="Section1_Heading13_Text2" xml:space="preserve">
    <value>将 Java Spring Framework 应用程序迁移到 Azure 和 Azure SQL Database</value>
  </data>
  <data name="Section1_Text9" xml:space="preserve">
    <value>此端到端教程演示了如何将完整的 Spring Framework 应用程序（Java Pet Clinic）迁移到 Azure，包括将 Azure SQL Database 用于使用最新 SQL Server JDBC 驱动程序的 JPA/Hibernate。</value>
  </data>
  <data name="Section1_Heading14_Text1" xml:space="preserve">
    <value> 教程：</value>
  </data>
  <data name="Section1_Heading14_Text2" xml:space="preserve">
    <value>使用 DocumentDB 生成一个 Java Web 应用程序</value>
  </data>
  <data name="Section1_Text10" xml:space="preserve">
    <value>本教程展示如何使用 Azure DocumentDB 服务存储和访问托管在 Azure 网站上的 Java 应用程序中的数据。</value>
  </data>
  <data name="Section1_Heading11" xml:space="preserve">
    <value>非关系型数据</value>
  </data>
</root>