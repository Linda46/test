<?xml version="1.0" encoding="UTF-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Section1_Heading1" xml:space="preserve">
    <value>Службы данных</value>
  </data>
  <data name="Section1_Heading2" xml:space="preserve">
    <value>Основные сведения</value>
  </data>
  <data name="Section1_Heading3_Text1" xml:space="preserve">
    <value> Руководство:</value>
  </data>
  <data name="Section1_Heading3_Text2" xml:space="preserve">
    <value>Управление данными и бизнес-аналитика</value>
  </data>
  <data name="Section1_Text1" xml:space="preserve">
    <value>Сведения о технологиях в Azure, которые помогут вам работать как с реляционными, так и с нереляционными данными.</value>
  </data>
  <data name="Section1_Heading4_Text1" xml:space="preserve">
    <value> Руководство:</value>
  </data>
  <data name="Section1_Heading4_Text2" xml:space="preserve">
    <value>Управление данными. Выбор правильной технологии</value>
  </data>
  <data name="Section1_Text2" xml:space="preserve">
    <value>Сведения о различных сценариях технологий управления данными в Azure.</value>
  </data>
  <data name="Section1_Heading5" xml:space="preserve">
    <value>Хранилище Azure</value>
  </data>
  <data name="Section1_Heading6_Text1" xml:space="preserve">
    <value> Описание возможностей:</value>
  </data>
  <data name="Section1_Heading6_Text2" xml:space="preserve">
    <value>Служба BLOB-объектов</value>
  </data>
  <data name="Section1_Text3" xml:space="preserve">
    <value>BLOB-объекты — это простейший способ хранения больших объемов неструктурированных текстовых или двоичных данных, таких как видео, музыкальный файлы и изображения. BLOB-объекты представляют собой сертифицированную в соответствии со стандартном ISO 27001 службу, которая может автоматически масштабироваться для хранения до 100 терабайт данных. Они доступны практически отовсюду с помощью интерфейсов REST и клиентских API.</value>
  </data>
  <data name="Section1_Heading7_Text1" xml:space="preserve">
    <value> Описание возможностей:</value>
  </data>
  <data name="Section1_Heading7_Text2" xml:space="preserve">
    <value>Служба таблиц</value>
  </data>
  <data name="Section1_Text4" xml:space="preserve">
    <value>Таблицы предоставляют возможности NoSQL для приложений, которые должны хранить большие объемы неструктурированных данных. Таблицы представляют собой сертифицированную в соответствии со стандартном ISO 27001 службу, которая может автоматически масштабироваться для хранения до 100 терабайт данных. Они доступны практически отовсюду с помощью интерфейсов REST и управляемых API.</value>
  </data>
  <data name="Section1_Heading8_Text1" xml:space="preserve">
    <value> Учебник:</value>
  </data>
  <data name="Section1_Heading8_Text2" xml:space="preserve">
    <value>Создание магазина изображений в хранилище BLOB-объектов</value>
  </data>
  <data name="Section1_Text5" xml:space="preserve">
    <value>Создайте приложение, хранящее изображения в BLOB-объектах Azure. Вы научитесь использовать клиентские библиотеки Azure для Java и работать с хранилищем Azure.</value>
  </data>
  <data name="Section1_Heading9_Text1" xml:space="preserve">
    <value> Как:</value>
  </data>
  <data name="Section1_Heading9_Text2" xml:space="preserve">
    <value>использовать пользовательский домен с хранилищем BLOB-объектов</value>
  </data>
  <data name="Section1_Text6" xml:space="preserve">
    <value>Настроить учетную запись хранения для сопоставления пользовательского домена с вашей конечной точкой службы BLOB-объектов, чтобы пользователи видели ваше доменное имя в URL-адресах вашего приложения.</value>
  </data>
  <data name="Section1_Heading10" xml:space="preserve">
    <value>Реляционные данные</value>
  </data>
  <data name="Section1_Heading11_Text1" xml:space="preserve">
    <value> Описание возможностей:</value>
  </data>
  <data name="Section1_Heading11_Text2" xml:space="preserve">
    <value>База данных SQL</value>
  </data>
  <data name="Section1_Text7" xml:space="preserve">
    <value>Для приложений, которым требуется полнофункциональная реляционная база данных как служба, Azure предлагает базы данных SQL, ранее известные как база данных SQL Azure. База данных SQL обеспечивает высокую степень совместимости, что позволяет клиентам создавать приложения, используя различные платформы каркасной разработки.</value>
  </data>
  <data name="Section1_Heading12_Text1" xml:space="preserve">
    <value> Как:</value>
  </data>
  <data name="Section1_Heading12_Text2" xml:space="preserve">
    <value>управлять базой данных SQL Azure с помощью SQL Server Management Studio</value>
  </data>
  <data name="Section1_Text8" xml:space="preserve">
    <value>С помощью SQL Server Management Studio можно управлять логическими серверами и базами данных SQL Database. Эта статья содержит подробную информацию о создании баз данных и управлении ими, создании учетных записей и управлении ими, а также о мониторинге с помощью динамических административных представлений.</value>
  </data>
  <data name="Section1_Heading13_Text1" xml:space="preserve">
    <value> Учебник:</value>
  </data>
  <data name="Section1_Heading13_Text2" xml:space="preserve">
    <value>Миграция приложения Java Spring Framework в Azure и базу данных SQL Azure</value>
  </data>
  <data name="Section1_Text9" xml:space="preserve">
    <value>В этом сквозном учебнике демонстрируется, как перенести полное приложение Spring Framework (Java Pet Clinic) в Azure при использовании базы данных SQL Azure с JPA или Hibernate с последней версией драйверов JDBC для SQL Server.</value>
  </data>
  <data name="Section1_Heading14_Text1" xml:space="preserve">
    <value> Учебник:</value>
  </data>
  <data name="Section1_Heading14_Text2" xml:space="preserve">
    <value>Построение веб-приложения Java с использованием DocumentDB</value>
  </data>
  <data name="Section1_Text10" xml:space="preserve">
    <value>В этом руководстве показано, как с помощью службы Azure DocumentDB хранить данные и получать доступ к ним из приложения Java, размещенного на веб-сайтах Azure.</value>
  </data>
  <data name="Section1_Heading11" xml:space="preserve">
    <value>Нереляционные данные</value>
  </data>
</root>