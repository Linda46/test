<?xml version="1.0" encoding="UTF-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Section1_Heading1" xml:space="preserve">
    <value>Services de données</value>
  </data>
  <data name="Section1_Heading2" xml:space="preserve">
    <value>Fondamentaux</value>
  </data>
  <data name="Section1_Heading3_Text1" xml:space="preserve">
    <value> Guide :</value>
  </data>
  <data name="Section1_Heading3_Text2" xml:space="preserve">
    <value>Gestion des données et analyse marketing</value>
  </data>
  <data name="Section1_Text1" xml:space="preserve">
    <value>Découvrez les technologies Azure qui vous aident à travailler avec des données relationnelles ou non relationnelles.</value>
  </data>
  <data name="Section1_Heading4_Text1" xml:space="preserve">
    <value> Guide :</value>
  </data>
  <data name="Section1_Heading4_Text2" xml:space="preserve">
    <value>Gestion des données : choix de la technologie appropriée</value>
  </data>
  <data name="Section1_Text2" xml:space="preserve">
    <value>Découvrez différents scénarios pour les technologies de gestion des données dans Azure.</value>
  </data>
  <data name="Section1_Heading5" xml:space="preserve">
    <value>Azure Storage</value>
  </data>
  <data name="Section1_Heading6_Text1" xml:space="preserve">
    <value> Guide sur la fonctionnalité :</value>
  </data>
  <data name="Section1_Heading6_Text2" xml:space="preserve">
    <value>Service Blob</value>
  </data>
  <data name="Section1_Text3" xml:space="preserve">
    <value>Les objets blob constituent la manière la plus simple de stocker d&apos;importants volumes de données binaires ou de texte non structuré, tels que des fichiers vidéo ou audio, et des images. Les objets blob constituent un service géré certifié ISO 27001, capable d&apos;évoluer automatiquement pour prendre en charge un volume de données pouvant atteindre jusqu&apos;à 100 To. Ils sont accessibles de pratiquement n&apos;importe où via les API REST et clientes.</value>
  </data>
  <data name="Section1_Heading7_Text1" xml:space="preserve">
    <value> Guide sur la fonctionnalité :</value>
  </data>
  <data name="Section1_Heading7_Text2" xml:space="preserve">
    <value>Service de Table</value>
  </data>
  <data name="Section1_Text4" xml:space="preserve">
    <value>Les tables offrent des fonctionnalités NoSQL pour les applications devant stocker d&apos;importants volumes de données non structurées. Elles constituent un service géré certifié ISO 27001, capable d&apos;évoluer automatiquement pour prendre en charge un volume de données pouvant atteindre jusqu&apos;à 100 To. Elles sont accessibles de pratiquement n&apos;importe où via les API REST et managées.</value>
  </data>
  <data name="Section1_Heading8_Text1" xml:space="preserve">
    <value> Didacticiel :</value>
  </data>
  <data name="Section1_Heading8_Text2" xml:space="preserve">
    <value>Création d&apos;un Marketplace d&apos;images utilisant le stockage d&apos;objets blob</value>
  </data>
  <data name="Section1_Text5" xml:space="preserve">
    <value>Créez une application stockant des images dans un stockage d&apos;objets blob Azure. Vous allez apprendre à utiliser les bibliothèques clientes Azure pour Java et le stockage Azure.</value>
  </data>
  <data name="Section1_Heading9_Text1" xml:space="preserve">
    <value> Procédure :</value>
  </data>
  <data name="Section1_Heading9_Text2" xml:space="preserve">
    <value>Utilisation d&apos;un domaine personnalisé avec le stockage d&apos;objets blob</value>
  </data>
  <data name="Section1_Text6" xml:space="preserve">
    <value>Configurez votre compte de stockage pour mapper votre domaine personnalisé à votre point de terminaison de service d&apos;objets blob, pour que les utilisateurs puissent voir votre nom de domaine dans les URL de votre application.</value>
  </data>
  <data name="Section1_Heading10" xml:space="preserve">
    <value>Données relationnelles</value>
  </data>
  <data name="Section1_Heading11_Text1" xml:space="preserve">
    <value> Guide sur la fonctionnalité :</value>
  </data>
  <data name="Section1_Heading11_Text2" xml:space="preserve">
    <value>Base de données SQL</value>
  </data>
  <data name="Section1_Text7" xml:space="preserve">
    <value>Pour les applications pour lesquelles une base de données relationnelle en tant que service est nécessaire, Azure propose Base de données SQL, auparavant appelé Base de données SQL Azure. Base de données SQL offre un haut niveau d&apos;interopérabilité, permettant aux clients de concevoir des applications à l&apos;aide de la plupart des principales infrastructures de développement.</value>
  </data>
  <data name="Section1_Heading12_Text1" xml:space="preserve">
    <value> Procédure :</value>
  </data>
  <data name="Section1_Heading12_Text2" xml:space="preserve">
    <value>Gestion de Base de données SQL Azure à l&apos;aide de SQL Server Management Studio</value>
  </data>
  <data name="Section1_Text8" xml:space="preserve">
    <value>SQL Server Management Studio permet de gérer des bases de données et des serveurs logiques de base de données SQL. Cet article comprend des informations sur la création et la gestion des bases de données, la création et la gestion des informations de connexion, ainsi que sur la surveillance à l&apos;aide de vues de gestion dynamique.</value>
  </data>
  <data name="Section1_Heading13_Text1" xml:space="preserve">
    <value> Didacticiel :</value>
  </data>
  <data name="Section1_Heading13_Text2" xml:space="preserve">
    <value>Migration d&apos;une application Spring Framework Java vers Azure et une base de données SQL Azure</value>
  </data>
  <data name="Section1_Text9" xml:space="preserve">
    <value>Ce didacticiel complet présente la migration d&apos;une application Spring Framework Java complète (Java Pet Clinic) vers Azure, y compris l&apos;utilisation de la base de données SQL Azure avec JPA/Hibernate à l&apos;aide des derniers pilotes SQL Server JDBC.</value>
  </data>
  <data name="Section1_Heading14_Text1" xml:space="preserve">
    <value> Didacticiel :</value>
  </data>
  <data name="Section1_Heading14_Text2" xml:space="preserve">
    <value>Développez une application web Java à l&apos;aide de DocumentDB</value>
  </data>
  <data name="Section1_Text10" xml:space="preserve">
    <value>Ce didacticiel vous montre comment utiliser le service Azure DocumentDB pour stocker des données et y accéder à partir d&apos;une application Java hébergée sur Sites Web Azure.</value>
  </data>
  <data name="Section1_Heading11" xml:space="preserve">
    <value>Données non relationnelles</value>
  </data>
</root>