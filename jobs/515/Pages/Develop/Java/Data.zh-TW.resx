<?xml version="1.0" encoding="UTF-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Section1_Heading1" xml:space="preserve">
    <value>資料服務</value>
  </data>
  <data name="Section1_Heading2" xml:space="preserve">
    <value>基礎</value>
  </data>
  <data name="Section1_Heading3_Text1" xml:space="preserve">
    <value> 指導方針：</value>
  </data>
  <data name="Section1_Heading3_Text2" xml:space="preserve">
    <value>資料管理與商務分析</value>
  </data>
  <data name="Section1_Text1" xml:space="preserve">
    <value>了解 Azrue 中可以協助您使用關聯式與非關聯式資料的技術。</value>
  </data>
  <data name="Section1_Heading4_Text1" xml:space="preserve">
    <value> 指導方針：</value>
  </data>
  <data name="Section1_Heading4_Text2" xml:space="preserve">
    <value>資料管理：選擇正確的技術</value>
  </data>
  <data name="Section1_Text2" xml:space="preserve">
    <value>學習 Azure 中資料管理技術的不同案例。</value>
  </data>
  <data name="Section1_Heading5" xml:space="preserve">
    <value>Azure 儲存體</value>
  </data>
  <data name="Section1_Heading6_Text1" xml:space="preserve">
    <value> 功能指南：</value>
  </data>
  <data name="Section1_Heading6_Text2" xml:space="preserve">
    <value>Blob 服務</value>
  </data>
  <data name="Section1_Text3" xml:space="preserve">
    <value>Blob 是儲存大量無結構文字或二進位資料 (如視訊、音訊及影像) 的最簡單方式。Blobs 是 ISO 27001 認證的受管理服務，可自動擴充來儲存多達 100 TB 的資料。透過 REST 和用戶端 API，可從幾乎任何地方存取這些資料。</value>
  </data>
  <data name="Section1_Heading7_Text1" xml:space="preserve">
    <value> 功能指南：</value>
  </data>
  <data name="Section1_Heading7_Text2" xml:space="preserve">
    <value>資料表服務</value>
  </data>
  <data name="Section1_Text4" xml:space="preserve">
    <value>資料表提供 NoSQL 功能，可用於需要大量非結構化資料儲存體的應用程式。資料表是 ISO 27001 認證的受管理服務，可自動擴充來儲存多達 100 TB 的資料。透過 REST 和受管理 API，可從幾乎任何地方存取這些資料。</value>
  </data>
  <data name="Section1_Heading8_Text1" xml:space="preserve">
    <value> 教學課程：</value>
  </data>
  <data name="Section1_Heading8_Text2" xml:space="preserve">
    <value>建立使用 Blob 儲存體的映像市集</value>
  </data>
  <data name="Section1_Text5" xml:space="preserve">
    <value>建立應用程式，以在 Azure Blob 儲存體中儲存映像檔。您將了解如何使用適用於 Java 的 Azure 用戶端程式庫以及如何使用 Azure 儲存體。</value>
  </data>
  <data name="Section1_Heading9_Text1" xml:space="preserve">
    <value> 使用方法：</value>
  </data>
  <data name="Section1_Heading9_Text2" xml:space="preserve">
    <value>以 Blob 儲存體使用自訂網域</value>
  </data>
  <data name="Section1_Text6" xml:space="preserve">
    <value>設定儲存體帳戶以便將自訂網域對應至 Blob 服務端點，使用者便能在應用程式 URL 中看見您的網域名稱。</value>
  </data>
  <data name="Section1_Heading10" xml:space="preserve">
    <value>關聯式資料庫：</value>
  </data>
  <data name="Section1_Heading11_Text1" xml:space="preserve">
    <value> 功能指南：</value>
  </data>
  <data name="Section1_Heading11_Text2" xml:space="preserve">
    <value>SQL Database</value>
  </data>
  <data name="Section1_Text7" xml:space="preserve">
    <value>對於需要完整關聯式資料庫服務的應用程式，Azure 提供了 SQL Database (舊稱 SQL Azure Database)。SQL Database 提供高層次互通性，讓客戶得以使用多種主要開發架構來建置應用程式。</value>
  </data>
  <data name="Section1_Heading12_Text1" xml:space="preserve">
    <value> 使用方法：</value>
  </data>
  <data name="Section1_Heading12_Text2" xml:space="preserve">
    <value>使用 SQL Server Management Studio 管理 Azure SQL Database</value>
  </data>
  <data name="Section1_Text8" xml:space="preserve">
    <value>您可以使用 SQL Server Management Studio，管理 SQL Database 邏輯伺服器與資料庫。本文包含建立與管理資料庫、建立與管理登入，以及使用動態管理檢視進行監視的詳細資料。</value>
  </data>
  <data name="Section1_Heading13_Text1" xml:space="preserve">
    <value> 教學課程：</value>
  </data>
  <data name="Section1_Heading13_Text2" xml:space="preserve">
    <value>將 Java Spring Framework 應用程式移轉至 Azure 和 Azure SQL Database</value>
  </data>
  <data name="Section1_Text9" xml:space="preserve">
    <value>此端對端的教學課程將說明如何將完整的 Spring Framework 應用程式 (Java Pet Clinic) 移轉至 Azure，包括如何搭配使用 Azure SQL Database 與採用最新 SQL Server JDBC 驅動程式的 JPA/Hibernate。</value>
  </data>
  <data name="Section1_Heading14_Text1" xml:space="preserve">
    <value> 教學課程：</value>
  </data>
  <data name="Section1_Heading14_Text2" xml:space="preserve">
    <value>使用 DocumentDB 建置 Java Web 應用程式</value>
  </data>
  <data name="Section1_Text10" xml:space="preserve">
    <value>本教學課程說明如何使用 Azure DocumentDB 服務從 Azure 網站上的 Java 應用程式存放和存取資料。</value>
  </data>
  <data name="Section1_Heading11" xml:space="preserve">
    <value>非關聯資料</value>
  </data>
</root>